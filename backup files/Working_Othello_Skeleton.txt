// Generic_Based_Games.cpp : Defines the entry point for the application.
//

#include "Generic_Based_Games.h"



#define MAX_LOADSTRING 100

// Global Variables:
HINSTANCE hInst;                                // current instance
WCHAR szTitle[MAX_LOADSTRING];                  // The title bar text
WCHAR szWindowClass[MAX_LOADSTRING];            // the main window class name

// Forward declarations of functions included in this code module:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
   _In_opt_ HINSTANCE hPrevInstance,
   _In_ LPWSTR    lpCmdLine,
   _In_ int       nCmdShow) {
   UNREFERENCED_PARAMETER(hPrevInstance);
   UNREFERENCED_PARAMETER(lpCmdLine);

   // TODO: Place code here.

   // Initialize global strings
   LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
   LoadStringW(hInstance, IDC_GENERICBASEDGAMES, szWindowClass, MAX_LOADSTRING);
   MyRegisterClass(hInstance);

   // Perform application initialization:
   if (!InitInstance(hInstance, nCmdShow)) {
      return FALSE;
   }

   HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_GENERICBASEDGAMES));

   MSG msg;

   // Main message loop:
   while (GetMessage(&msg, nullptr, 0, 0)) {
      if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg)) {
         TranslateMessage(&msg);
         DispatchMessage(&msg);
      }
   }

   return (int)msg.wParam;
}



//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
ATOM MyRegisterClass(HINSTANCE hInstance) {
   WNDCLASSEXW wcex;

   wcex.cbSize = sizeof(WNDCLASSEX);

   wcex.style = CS_HREDRAW | CS_VREDRAW;
   wcex.lpfnWndProc = WndProc;
   wcex.cbClsExtra = 0;
   wcex.cbWndExtra = 0;
   wcex.hInstance = hInstance;
   wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_GENERICBASEDGAMES));
   wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
   //wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
   //Dark Gray Background for the Client Area
   wcex.hbrBackground = (HBRUSH) GetStockObject(DKGRAY_BRUSH);
   wcex.lpszMenuName = MAKEINTRESOURCEW(IDC_GENERICBASEDGAMES);
   wcex.lpszClassName = szWindowClass;
   wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

   return RegisterClassExW(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow) {
   hInst = hInstance; // Store instance handle in our global variable

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd) {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE: Processes messages for the main window.
//
//  WM_COMMAND  - process the application menu
//  WM_PAINT    - Paint the main window
//  WM_DESTROY  - post a quit message and return
//
// 

//Global Game Variables
//const int CELL_SIZE = 100; //Tic-Tac-Toe Cell Size
const int CELL_SIZE = 50; //Othello Cell Size
const int PASS = -1;
HBRUSH redBrush, blueBrush;
HICON hTTT_P1_Icon, hTTT_P2_Icon; //IDI_TTT_P1_ICON

int gameBoard[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0 };
int winningLine[3];
const int P1 = 1, P2 = -1;
bool moveIsValid; //used to determine validity of move for move command
GameBoard* board; // the state of the game board
GameView* v; // a View for outputting the board via operator<<
GameMove* playerMove; //creates and holds the user's desired move
vector<GameMove*> possMoves; // a holder for possible moves


BOOL GetGameBoardRect(HWND hWnd, RECT * pRect) {
   RECT rc;
   if (GetClientRect(hWnd, &rc)) {
      int width = rc.right - rc.left;
      int height = rc.bottom - rc.top;

      pRect->left = (width - CELL_SIZE * 8) / 2;
      pRect->top = (height - CELL_SIZE * 8) / 2;

      pRect->right = pRect->left + CELL_SIZE * 8;
      pRect->bottom = pRect->top + CELL_SIZE * 8;
      return TRUE;
   }//end if

   //In case of failure, initialize the Rectangle to empty and return False
   SetRectEmpty(pRect);
   return FALSE;
}

void DrawLine(HDC hdc, int x1, int y1, int x2, int y2) {
   //Draw A line given a starting point and an eding point
   MoveToEx(hdc, x1, y1, NULL);
   LineTo(hdc, x2, y2);
}

int GetCellNumFromPoint(HWND hWnd, int x, int y) {
   RECT rc;
   //Initialize point values
   POINT pt = {x, y};

   if (GetGameBoardRect(hWnd, &rc)) {
      //check if point is located inside of game board
      if (PtInRect(&rc, pt)) {
         //click was located within the game board
         //Normalize (0 to 3*CELL_SIZE)
         x = pt.x - rc.left;
         y = pt.y - rc.top;

         int column = x / CELL_SIZE;
         int row = y / CELL_SIZE;

         //convert to index (0 - 63)
         return column + (row * 8);

      }//end if

   }//end if
   return -1; //click was not inside of the game board or an error occured
}

BOOL GetCellRect(HWND hWnd, int index, RECT* pRect) {
   //initialize pRect to an empty rectangle
   SetRectEmpty(pRect);
   //make sure index is valid
   if (index < 0 || index > OTHELLO_BOARD_SIZE - 1)
      return FALSE;
   RECT rcBoard;
   if (GetGameBoardRect(hWnd, &rcBoard)) {
      //Convert index from 0 to 63 into (x,y) pair
      int y = index / 8; //row number
      int x = index % 8; //column number

      //assign the correct cell values to our rectangle
      pRect->left = rcBoard.left + x * CELL_SIZE + 1;
      pRect->top = rcBoard.top + y * CELL_SIZE + 1;
      //The CELL_SIZE is fixed, so in order to get the right and bottom
      //values, we just add the CELL_SIZE value to the left and the top
      pRect->right = pRect->left + CELL_SIZE - 1;
      pRect->bottom = pRect->top + CELL_SIZE - 1;
      //The cell rectangle was succesfully initialized, so return true
      return TRUE;
   }//end if
   //return false if unsuccessful
   return FALSE;
}

/* 
* Returns:
* 0 - No Winner
* 1 - P1 wins
* 2 - P2 wins
* 3 - Tie
*/

/* 0, 1, 2
*  3, 4, 5
*  6, 7, 8
*/

void ShowTurn(HWND hWnd, HDC hdc) {
   //static variables only get allocated once instead of everytime you call the function
   static const WCHAR p1TurnText [] = L"Player 1's Turn";
   static const WCHAR p2TurnText [] = L"Player 2's Turn";

   const WCHAR * pCurrTurnText = NULL;
   COLORREF cCurrTurnTextColor = RGB(0,0,0);
   int boardVal = 0;

   if (!board->IsFinished()) {
      pCurrTurnText = (board->GetNextPlayer() == -1) ? p1TurnText : p2TurnText;
      cCurrTurnTextColor = (board->GetNextPlayer() == -1) ? RGB(0, 0, 255) : RGB(255, 0, 0);
   }//end if
   else {
      boardVal = board->GetValue();
      pCurrTurnText = (boardVal > 0) ? L"Player 1 Wins!" : ((boardVal == 0) ? L"It's A Draw!" : L"Player 2 Wins!");
      cCurrTurnTextColor = (boardVal > 0) ? RGB(0, 0, 255) : ((boardVal == 0) ? RGB(153, 50, 204) : RGB(255, 0, 0));
      //                                    BLUE                                PURPLE              RED
   }//end else

   RECT rc;
   if (pCurrTurnText != NULL && GetClientRect(hWnd, &rc)) {
      rc.top = rc.bottom - 35;
      FillRect(hdc, &rc, (HBRUSH)GetStockObject(DKGRAY_BRUSH));
      SetTextColor(hdc, cCurrTurnTextColor);
      SetBkMode(hdc, TRANSPARENT);
      DrawText(hdc, pCurrTurnText, lstrlen(pCurrTurnText), &rc, DT_CENTER);
   }//end if
}//close ShowTurn()

void DrawCenteredIcon(HDC hdc, RECT* pRect, HICON hIcon) {
   const int ICON_WIDTH = GetSystemMetrics(SM_CXICON);
   const int ICON_HEIGHT = GetSystemMetrics(SM_CYICON);
   //make sure the given rectangle isn't null
   if (pRect != NULL) {
      int center_x = pRect->left + ((pRect->right - pRect->left) - ICON_WIDTH) / 2;
      int center_y = pRect->top + ((pRect->bottom - pRect->top) - ICON_HEIGHT) / 2;
      DrawIcon(hdc, center_x, center_y, hIcon);
   }//end if
}//close DrawCenteredIcon

void ShowWinningLine(HWND hWnd, HDC hdc) {
   //Fill in the winning line
   if (board->IsFinished()) {
      RECT rcWinningLine;
      for (int i = 0; i < 3; ++i) {
         if (GetCellRect(hWnd, winningLine[i], &rcWinningLine)) {
            FillRect(hdc, &rcWinningLine, (board->GetValue() == -3) ? redBrush : blueBrush);
            DrawCenteredIcon(hdc, &rcWinningLine, (board->GetValue() == -3) ? hTTT_P2_Icon : hTTT_P1_Icon);
         }//end if                
      }//end for
   }//end if

   
   /*//Fill in the winning line
   RECT rcWinningLine;
   for (int i = 0; i < 3; ++i) {
      if (GetCellRect(hWnd, wins[i], &rcWinningLine)) {
         FillRect(hdc, &rcWinningLine, (winner == 2) ? redBrush : blueBrush);
         DrawCenteredIcon(hdc, &rcWinningLine, (winner == 2) ? hTTT_P2_Icon : hTTT_P1_Icon);
      }//end if                
   }//end for*/
}//close ShowWinningLine

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
   switch (message) {
   case WM_CREATE:
   {
      redBrush = CreateSolidBrush(RGB(255, 0, 0)); //Red brush
      blueBrush = CreateSolidBrush(RGB(0, 0, 255)); //Blue brush

      //Set board and view to appropriate TicTacToe types
      /*board = new TicTacToeBoard();
      v = new TicTacToeView(board);*/
      board = new OthelloBoard();
      v = new OthelloView(board);

      //Load Player Icons
      hTTT_P1_Icon = LoadIcon(hInst, MAKEINTRESOURCE(IDI_TTT_P1_ICON));
      hTTT_P2_Icon = LoadIcon(hInst, MAKEINTRESOURCE(IDI_TTT_P2_ICON));
   }
   break;
   case WM_COMMAND:
   {
      int wmId = LOWORD(wParam);
// Parse the menu selections:
switch (wmId) {
case IDM_ABOUT:
   DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
   break;
case IDM_EXIT:
   DestroyWindow(hWnd);
   break;
case ID_FILE_NEWGAME:
{
   int startNewGame = MessageBox(hWnd, L"Are you sure you want to start a new game?",
      L"New Game", MB_YESNO | MB_ICONQUESTION);
   if (startNewGame == IDYES) {
      /*playerTurn = FALSE;
      winner = 0;
      gameFinished = FALSE;
      ZeroMemory(gameBoard, sizeof(gameBoard));*/
      ZeroMemory(winningLine, sizeof(winningLine));
      //get rid of any active moves on the game board and re-initializes all of the variables
      board->ResetGameBoard(); 
      //Force a paint message
      InvalidateRect(hWnd, NULL, TRUE); //Post WM_PAINT to our windowProc. It gets queued in our msg queue
      UpdateWindow(hWnd); //forces immediate handling of WM_PAINT
   }//end if
}

break;
case ID_EDIT_UNDOMOVE:
{
   if (board != NULL) {
      board->UndoLastMove();
      //Force a paint message
      InvalidateRect(hWnd, NULL, TRUE); //Post WM_PAINT to our windowProc. It gets queued in our msg queue
      UpdateWindow(hWnd); //forces immediate handling of WM_PAINT
   }//end if  
}
break;
case ID_EDIT_PASS:
{
   if (board != NULL) {
      //create a Passing move and apply it to the game board
      playerMove = board->CreateMove(PASS);
      board->ApplyMove(playerMove);
      //Force a paint message
      InvalidateRect(hWnd, NULL, TRUE); //Post WM_PAINT to our windowProc. It gets queued in our msg queue
      UpdateWindow(hWnd); //forces immediate handling of WM_PAINT
   }//end if  
}
break;
default:
   return DefWindowProc(hWnd, message, wParam, lParam);
}
   }
   break;
   case WM_LBUTTONDOWN:
   {
      //Get the X and Y coordinates of where the user has clicked
      int xPos = GET_X_LPARAM(lParam);
      int yPos = GET_Y_LPARAM(lParam);

      //Make sure that the game isn't finished before we do anything
      if (board->IsFinished())
         break;

      int index = GetCellNumFromPoint(hWnd, xPos, yPos);

      HDC hdc = GetDC(hWnd);
      if (NULL != hdc) {
         //display index value
         /*WCHAR temp[100];
         wsprintf(temp, L"Index = %d", index);
         TextOut(hdc, xPos, yPos, temp, lstrlen(temp));*/
         
         //Get cell dimension from its index
         if (index != -1) {
            RECT rcCell;
       
            try {
               //Try creating a game move for the given index
               playerMove = board->CreateMove(index);
               board->GetPossibleMoves(&possMoves);
               //Check to see if the move is valid
               moveIsValid = false;
               for (vector<GameMove*>::iterator itr = possMoves.begin();
                  itr != possMoves.end(); itr++) {     
                  moveIsValid = ((**itr == *playerMove) ? true : moveIsValid);
                  delete* itr;
               }//end for 
               //clear possMoves since it is no longer needed
               possMoves.clear();

               //if move is valid, apply the move to the board
               if (moveIsValid) {
                  //apply move to the game board
                  board->ApplyMove(playerMove);
                  //display applied move
                  if (GetCellRect(hWnd, index, &rcCell)) {
                     DrawCenteredIcon(hdc, &rcCell, (board->GetNextPlayer() == P2) ? hTTT_P2_Icon : hTTT_P1_Icon);

                     //check for a winner
                     if (board->IsFinished()) {
                        board->UpdateWinningCells(winningLine);
                        if(board->GetValue() == 0)
                           //its a draw
                           MessageBox(hWnd, L"Its a Draw",
                              L"Game Finished ", MB_OK | MB_ICONEXCLAMATION);
                        else {
                           //winner found
                           //ShowWinningLine(hWnd, hdc);

                           MessageBox(hWnd, board->GetValue() > 0 ? L"Player 1 is the winner" : L"Player 2 is the winner",
                              L"Winner detected ", MB_OK | MB_ICONINFORMATION);
                        }//end else  
                        
                        //Display the current player's turn
                        ShowTurn(hWnd, hdc);           
                     }//end if

                     //Force a paint message
                     InvalidateRect(hWnd, NULL, TRUE); //Post WM_PAINT to our windowProc. It gets queued in our msg queue
                     UpdateWindow(hWnd); //forces immediate handling of WM_PAINT

                  }//end if
               }//end if
               else
                  delete playerMove;//if not, then delete the invalid move.
            }//end try
            catch (OthelloException& e) {
               //If there was an exception, display the message and 
               //delete the move.
               cout << e.GetMessage() << endl;
               delete playerMove;
            }//end catch


            /*
            if ((gameBoard[index] == 0) && GetCellRect(hWnd, index, &rcCell)) {
               //fill in gameboard with player value
               gameBoard[index] = playerTurn ? 2 : 1;
               //FillRect(hdc, &rcCell, playerTurn ? redBrush : blueBrush);
               //DrawIcon(hdc, rcCell.left, rcCell.top, playerTurn ? hTTT_P2_Icon : hTTT_P1_Icon);
               DrawCenteredIcon(hdc, &rcCell, playerTurn ? hTTT_P2_Icon : hTTT_P1_Icon);
               //check for a winner
               winner = UpdateWinningCells(wins);
               if (winner == 1 || winner == 2) {
                  //winner found
                  ShowWinningLine(hWnd, hdc);

                  MessageBox(hWnd, (winner == 1) ? L"Player 1 is the winner" : L"Player 2 is the winner",
                     L"Winner detected ", MB_OK | MB_ICONINFORMATION);
                  gameFinished = TRUE;
               }//end if
               else if (winner == 3) {
                  //its a draw
                  MessageBox(hWnd, L"Its a Draw",
                     L"Game Finished ", MB_OK | MB_ICONEXCLAMATION);
                  gameFinished = TRUE;
               }
               else {
                  //there is no winner, so update whos turn it is.
                  playerTurn = !playerTurn;
               }//end else

               //Display the current player's turn
               ShowTurn(hWnd, hdc);

            }//end if*/
         }//end if

         ReleaseDC(hWnd, hdc); //release hdc because we are done using it
      }//end if
   }
   break;
   case WM_GETMINMAXINFO:
   {
      MINMAXINFO* pMinMax = (MINMAXINFO*)lParam;
      //Set the Minimum Size for the Window
      pMinMax->ptMinTrackSize.x = CELL_SIZE * 13;
      pMinMax->ptMinTrackSize.y = CELL_SIZE * 11;

      ////Set the Minimum Size for the Window (Tic-Tac-Toe)
      //pMinMax->ptMinTrackSize.x = CELL_SIZE * 5;
      //pMinMax->ptMinTrackSize.y = CELL_SIZE * 5;
   }
   break;
   case WM_PAINT:
   {
      PAINTSTRUCT ps;
      HDC hdc = BeginPaint(hWnd, &ps);
      // TODO: Add any drawing code that uses hdc here...
      RECT rc;
      if (GetGameBoardRect(hWnd, &rc)) {

         //Draw Player names and current turn inside of the client window
         RECT rcClient;
         //Logic for drawing player stuff on a Tic-Tac-Toe Board
         //if (GetClientRect(hWnd, &rcClient)) {
         //   const WCHAR p1Text [] = L"Player 1";
         //   const WCHAR p2Text [] = L"Player 2";
         //   //Set background to be transparent and the p1 text to be blue
         //   SetBkMode(hdc, TRANSPARENT);
         //   SetTextColor(hdc, RGB(0, 0, 255));
         //   TextOut(hdc, 16, 16, p1Text, ARRAYSIZE(p1Text));
         //   DrawIcon(hdc, 24, 40, hTTT_P1_Icon);
         //   //Set the p2 text to be red
         //   SetTextColor(hdc, RGB(255, 0, 0));
         //   TextOut(hdc, rcClient.right - 70, 16, p2Text, ARRAYSIZE(p2Text));
         //   DrawIcon(hdc, rcClient.right - 64, 40, hTTT_P2_Icon);
         //   //Display the current player's turn
         //   ShowTurn(hWnd, hdc);
         //}//end if

         if (GetClientRect(hWnd, &rcClient)) {
            board->GetPlayerScore(1);
            //display index value
            /*WCHAR temp[100];
            wsprintf(temp, L"Index = %d", index);
            TextOut(hdc, xPos, yPos, temp, lstrlen(temp));*/

            WCHAR p1Text[50];
            WCHAR p2Text[50];
            //Set background to be transparent and the p1 text to be blue
            SetBkMode(hdc, TRANSPARENT);
            SetTextColor(hdc, RGB(0, 0, 255));
            wsprintf(p1Text, L"Player 1:   %d ", board->GetPlayerScore(1));
            TextOut(hdc, 16, 16, p1Text, lstrlen(p1Text));
            DrawIcon(hdc, 24, 40, hTTT_P1_Icon);
            //Set the p2 text to be red
            SetTextColor(hdc, RGB(255, 0, 0));
            wsprintf(p2Text, L"Player 2:   %d ", board->GetPlayerScore(-1));
            TextOut(hdc, rcClient.right - 100, 16, p2Text, lstrlen(p2Text));
            DrawIcon(hdc, rcClient.right - 90, 40, hTTT_P2_Icon);
            //Display the current player's turn
            ShowTurn(hWnd, hdc);
         }//end if


         //Allows you to select border color (White in this case)
         FillRect(hdc, &rc, (HBRUSH) GetStockObject(WHITE_BRUSH));

         //Code For Drawing Tic-Tac-Toe Board
         //for (int i = 0; i < 4; i++) {
         //   //Draw Vertical Lines
         //   DrawLine(hdc, rc.left + (CELL_SIZE * i), rc.top, rc.left + (CELL_SIZE * i), rc.bottom);
         //   //Draw Horizontal Lines
         //   DrawLine(hdc, rc.left, rc.top + (CELL_SIZE * i), rc.right, rc.top + (CELL_SIZE * i));
         //}//end for loop

         //Code For Drawing Othello Board
         for (int i = 0; i < 9; i++) {
            //Draw Vertical Lines
            DrawLine(hdc, rc.left + (CELL_SIZE * i), rc.top, rc.left + (CELL_SIZE * i), rc.bottom);
            //Draw Horizontal Lines
            DrawLine(hdc, rc.left, rc.top + (CELL_SIZE * i), rc.right, rc.top + (CELL_SIZE * i));
         }//end for loop

         //Draw all occupied cells
         RECT rcCell;
         char indexVal;
         for (int i = 0; i < OTHELLO_BOARD_SIZE; i++) {
            indexVal = board->GetBoardValueAtIndex(i);
            if (indexVal != 0 && GetCellRect(hWnd, i, &rcCell)) {
               //fill in gameboard with player value
               DrawCenteredIcon(hdc, &rcCell, (indexVal == -1) ? hTTT_P2_Icon : hTTT_P1_Icon);
               //FillRect(hdc, &rcCell, (gameBoard[i] == 2) ? redBrush : blueBrush);
            }//end if
         }//end for

         //show winner
         /*if (board->GetValue() == 3 || board->GetValue() == -3)
            ShowWinningLine(hWnd, hdc);*/
     
      }//end if
      
      //Draw Horizontal Lines

      EndPaint(hWnd, &ps);
   }
   break;
   case WM_DESTROY:
   {
      //Dispose of Brushes
      DeleteObject(redBrush);
      DeleteObject(blueBrush);


      //now that we are done, we must delete all of the moves that are still
      //applied on the board
      int undoLimit = board->GetMoveCount();
      for (int i = 0; i < undoLimit; i++) {
         board->UndoLastMove();
      }//end for loop

      //We must also delete the board and the view pointers that we put 
      //on the heap.
      delete board;
      delete v;



      //Dispose of Icon images
      DestroyIcon(hTTT_P1_Icon);
      DestroyIcon(hTTT_P2_Icon);
      PostQuitMessage(0);
   }
   break;
   default:
      return DefWindowProc(hWnd, message, wParam, lParam);
   }
   return 0;
}

// Message handler for about box.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) {
   UNREFERENCED_PARAMETER(lParam);
   switch (message) {
   case WM_INITDIALOG:
      return (INT_PTR)TRUE;

   case WM_COMMAND:
      if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL) {
         EndDialog(hDlg, LOWORD(wParam));
         return (INT_PTR)TRUE;
      }
      break;
   }
   return (INT_PTR)FALSE;
}
